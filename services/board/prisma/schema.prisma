// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  columns     Column[]
  memberships BoardMembership[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // <-- Add this
}

model Column {
  id        Int      @id @default(autoincrement())
  name      String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   Int
  tasks     Task[]
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // <-- Add this

  @@unique([boardId, name])
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    Int
  order       Int
  assigneeId  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // <-- Add this

  @@unique([columnId, title])
}

model BoardMembership {
  id        Int      @id @default(autoincrement())
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   Int
  userId    Int
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, userId])
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}
