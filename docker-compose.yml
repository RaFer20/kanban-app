services:
  auth-db:
    image: postgres:15
    container_name: auth-db
    restart: always
    volumes:
      - auth-db-data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: kanban_user
      POSTGRES_PASSWORD: kanban_pass
      POSTGRES_DB: authdb
      POSTGRES_MULTIPLE_DATABASES: authdb,test_authdb
    ports:
      - "5432:5432"

  auth:
    build:
      context: ./services/auth
    container_name: auth-service
    depends_on:
      - auth-db
      - otel-collector
    environment:
      ENV: docker
      POSTGRES_USER: kanban_user
      POSTGRES_PASSWORD: kanban_pass
      POSTGRES_DB: authdb
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    env_file:
      - ./services/auth/.env.docker
    volumes:
      - ./services/auth:/app
    ports:
      - "8000:8000"
    command: ["/bin/bash", "/start.sh"]

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config", "/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"  # gRPC receiver for OTLP
      - "4318:4318"  # HTTP 

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./docker/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - auth

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

  board-db:
    image: postgres:15
    container_name: board-db
    restart: always
    environment:
      POSTGRES_USER: kanban_user
      POSTGRES_PASSWORD: kanban_pass
      POSTGRES_DB: boarddb
    ports:
      - "5433:5432"
    volumes:
      - board-db-data:/var/lib/postgresql/data

  board:
    build:
      context: ./services/board
    container_name: board-service
    depends_on:
      - board-db
    environment:
      DATABASE_URL: postgresql://kanban_user:kanban_pass@board-db:5432/boarddb
    env_file:
      - ./services/board/.env
    volumes:
      - ./services/board:/app
    ports:
      - "3000:3000"
    command: npm run dev

  test-board-db:
    image: postgres:15
    container_name: test-board-db
    restart: always
    environment:
      POSTGRES_DB: test_boarddb
      POSTGRES_USER: kanban_user
      POSTGRES_PASSWORD: kanban_pass
    ports:
      - "5443:5432"
    volumes:
      - test-board-db-data:/var/lib/postgresql/data

  board-tests:
    build:
      context: ./services/board
    depends_on:
      - test-board-db
      - auth
    environment:
      DATABASE_URL: postgresql://kanban_user:kanban_pass@test-board-db:5432/test_boarddb
    volumes:
      - ./services/board:/app
    working_dir: /app
    command: npm test -- --runInBand

  tempo:
    image: grafana/tempo:latest
    ports:
      - "3200:3200"
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./docker/tempo/tempo.yaml:/etc/tempo.yaml
    expose:
      - "4317"

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: frontend
    working_dir: /app
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    command: npm run dev
    depends_on:
      - auth
      - board

  nginx:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile.local
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - auth
      - board
      - frontend

volumes:
  auth-db-data:
  grafana-storage:
  board-db-data:
  test-board-db-data:
